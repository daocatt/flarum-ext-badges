{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@gtdxyz/flarum-ext-badges/webpack/bootstrap","webpack://@gtdxyz/flarum-ext-badges/webpack/runtime/compat get default export","webpack://@gtdxyz/flarum-ext-badges/webpack/runtime/define property getters","webpack://@gtdxyz/flarum-ext-badges/webpack/runtime/hasOwnProperty shorthand","webpack://@gtdxyz/flarum-ext-badges/webpack/runtime/make namespace object","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['common/app']\"","webpack://@gtdxyz/flarum-ext-badges/./src/common/index.js","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['extend']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['Model']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['models/User']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['components/UserPage']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['utils/UserControls']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['components/LinkButton']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['components/Button']\"","webpack://@gtdxyz/flarum-ext-badges/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@gtdxyz/flarum-ext-badges/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['utils/mixin']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['components/Modal']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['helpers/fullTime']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['utils/ItemList']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['components/Select']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['utils/Stream']\"","webpack://@gtdxyz/flarum-ext-badges/./src/forum/components/GiveBadgeModal.js","webpack://@gtdxyz/flarum-ext-badges/./src/forum/components/BadgeModal.js","webpack://@gtdxyz/flarum-ext-badges/./src/common/models/Badge.js","webpack://@gtdxyz/flarum-ext-badges/./src/common/models/BadgeCategory.js","webpack://@gtdxyz/flarum-ext-badges/./src/common/models/UserBadge.js","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['components/LoadingIndicator']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['common/Component']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['common/components/Tooltip']\"","webpack://@gtdxyz/flarum-ext-badges/./src/common/components/UserBadge.js","webpack://@gtdxyz/flarum-ext-badges/./src/forum/utils/categorizeUserBadges.js","webpack://@gtdxyz/flarum-ext-badges/./src/forum/components/UserBadgeList.js","webpack://@gtdxyz/flarum-ext-badges/./src/forum/components/BadgesProfilePage.js","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['components/Page']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['components/IndexPage']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['common/helpers/listItems']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['components/Link']\"","webpack://@gtdxyz/flarum-ext-badges/./src/forum/components/BadgeCategoryList/TableView.js","webpack://@gtdxyz/flarum-ext-badges/./src/forum/components/BadgeCategoryList/BlockListView.js","webpack://@gtdxyz/flarum-ext-badges/./src/forum/components/BadgesOverviewPage.js","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['helpers/avatar']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['helpers/humanTime']\"","webpack://@gtdxyz/flarum-ext-badges/./src/forum/components/BadgeUserList.js","webpack://@gtdxyz/flarum-ext-badges/./src/forum/components/BadgeItemPage.js","webpack://@gtdxyz/flarum-ext-badges/./src/forum/addSidebarNav.js","webpack://@gtdxyz/flarum-ext-badges/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['common/states/PaginatedListState']\"","webpack://@gtdxyz/flarum-ext-badges/./src/forum/states/UserBadgeListState.js","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['forum/components/Notification']\"","webpack://@gtdxyz/flarum-ext-badges/./src/forum/notification/BadgeReceivedNotification.js","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['forum/components/NotificationGrid']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['forum/app']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['common/extend']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['forum/components/UserCard']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['common/components/Link']\"","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['components/Switch']\"","webpack://@gtdxyz/flarum-ext-badges/./src/forum/components/SelectUserCardBadgesModal.js","webpack://@gtdxyz/flarum-ext-badges/external root \"flarum.core.compat['forum/states/DiscussionListState']\"","webpack://@gtdxyz/flarum-ext-badges/./src/forum/index.js","webpack://@gtdxyz/flarum-ext-badges/./src/forum/addBadgeListUserCard.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/app'];","import app from 'flarum/common/app';\n\napp.initializers.add('gtdxyz/flarum-user-badges', () => {\n  // console.log('[gtdxyz/flarum-user-badges] Hello, forum and admin!')\n});\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['models/User'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/UserPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['utils/UserControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/LinkButton'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Button'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['utils/mixin'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Modal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['helpers/fullTime'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['utils/ItemList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Select'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['utils/Stream'];","import Modal from 'flarum/components/Modal';\nimport Button from 'flarum/components/Button';\nimport ItemList from 'flarum/utils/ItemList';\nimport Select from 'flarum/components/Select';\nimport Stream from 'flarum/utils/Stream';\nimport BadgeModal from './BadgeModal';\n\nexport default class GiveBadgeModal extends Modal {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    // Select image\n    this.selectedBadge = this.attrs.badge ? this.attrs.badge.badge() : null;\n\n    // Current user\n    this.user = this.attrs.badge ? this.attrs.badge.user() : this.attrs.user;\n\n    // User has badge\n    this.userHasBadge = false;\n\n    // Badge model\n    this.badge = this.attrs.badge ? this.attrs.badge : app.store.createRecord('userBadges');\n\n    // Earning reason\n    this.description = Stream(this.badge.description());\n\n    // List of available bagges\n    this.categories = {};\n\n    this.uncategorizedBadges = [];\n\n    this.loading = false;\n\n    // Load all available badges\n    if (!this.attrs.badge) {\n      this.loading = true;\n\n      app.store\n        .find('badges', {\n          include: 'category',\n        })\n        .then((badges) => {\n          badges.forEach((badge) => {\n            // Categorized\n            if (badge.category()) {\n              const category = badge.category();\n\n              if (!this.categories[category.id()]) {\n                this.categories[category.id()] = {\n                  category,\n                  badges: [badge],\n                };\n              } else {\n                this.categories[category.id()].badges.push(badge);\n              }\n            }\n            // Uncategorized\n            else {\n              this.uncategorizedBadges.push(badge);\n            }\n          });\n\n          this.loading = false;\n\n          // Redraw\n          m.redraw();\n        });\n    }\n  }\n\n  className() {\n    return 'Modal--small BadgeModal';\n  }\n\n  title() {\n    return app.translator.trans(`gtdxyz-flarum-badges.forum.${this.badge.exists ? 'update' : 'give'}_badge`);\n  }\n\n  content() {\n    return (\n      <div>\n        <div className=\"Modal-body\">\n          <div className=\"Form\">{this.fields().toArray()}</div>\n        </div>\n\n        <div className=\"Modal-footer\">\n          <Button className={'Button Button--primary'} type={'submit'} loading={this.loading} disabled={this.userHasBadge}>\n            {app.translator.trans('core.forum.composer_edit.submit_button')}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  fields() {\n    const items = new ItemList();\n\n    // Badge selector\n    items.add(\n      'badge',\n      <div className=\"BadgeModalListItem\">\n        <p>\n          <b>{app.translator.trans('gtdxyz-flarum-badges.forum.badge.badge')}</b>\n        </p>\n\n        <div className={'Select'}>\n          <select\n            value={this.selectedBadge ? this.selectedBadge.id() : 'empty'}\n            disabled={!!this.attrs.badge}\n            onchange={(e) => {\n              if (e.target.value === 'empty') return;\n              this.selectedBadge = app.store.getById('badges', e.target.value);\n\n              // Check if the user already has this badge\n              this.checkUserHasBadge(this.selectedBadge);\n            }}\n            className=\"Select-input FormControl\"\n          >\n            <option value={'empty'}>{app.translator.trans('gtdxyz-flarum-badges.forum.select_badge')}</option>\n\n            {/* When no badge is selected, show all available badges */}\n            {!this.attrs.badge &&\n              Object.values(this.categories).map(({ category, badges }) => (\n                <optgroup label={category.name()}>\n                  {badges.map((badge) => (\n                    <option value={badge.id()}>{badge.name()}</option>\n                  ))}\n                </optgroup>\n              ))}\n\n            {!this.attrs.badge && this.uncategorizedBadges.length >= 1 && (\n              <optgroup label={app.translator.trans('gtdxyz-flarum-badges.forum.uncategorized')}>\n                {this.uncategorizedBadges.map((badge) => (\n                  <option value={badge.id()}>{badge.name()}</option>\n                ))}\n              </optgroup>\n            )}\n\n            {/* When a badge is already assigned */}\n            {!!this.attrs.badge && <option value={this.selectedBadge.id()}>{this.selectedBadge.name()}</option>}\n          </select>\n          <i class=\"icon fas fa-caret-down Select-caret\"></i>\n        </div>\n\n        {this.userHasBadge && <p className={'UserHasBadge'}>{app.translator.trans('gtdxyz-flarum-badges.forum.user_has_badge')}</p>}\n      </div>,\n      30\n    );\n\n    // Badge description\n    items.add(\n      'badge_description',\n      <div className={'BadgeModalListItem'}>\n        <p>\n          <b>{app.translator.trans('gtdxyz-flarum-badges.forum.badge.description')}:</b>\n        </p>\n        <p>{this.selectedBadge ? this.selectedBadge.description() : app.translator.trans('gtdxyz-flarum-badges.forum.select_badge')}</p>\n      </div>,\n      30\n    );\n\n    // Badge earning reason\n    items.add(\n      'description',\n      <div className=\"BadgeModalListItem\">\n        <p>\n          <b>{app.translator.trans('gtdxyz-flarum-badges.forum.badge.earning_reason')}</b>\n        </p>\n        <textarea\n          className=\"FormControl\"\n          placeholder={app.translator.trans('gtdxyz-flarum-badges.forum.badge.earning_reason')}\n          bidi={this.description}\n        />\n      </div>,\n      30\n    );\n\n    return items;\n  }\n\n  checkUserHasBadge(badge) {\n    let foundBadge = false;\n\n    this.user.userBadges().map((userBadge) => {\n      if (userBadge.badge() == badge) {\n        foundBadge = true;\n      }\n    });\n\n    this.userHasBadge = foundBadge;\n\n    m.redraw();\n  }\n\n  onsubmit(e) {\n    e.preventDefault();\n\n    this.loading = true;\n\n    this.badge\n      .save({\n        description: this.description(),\n        relationships: this.attrs.badge\n          ? {}\n          : {\n              badge: this.selectedBadge,\n              user: this.user,\n            },\n      })\n      .then(\n        () => {\n          // Re-open badge modal\n          if (this.attrs.badge) {\n            app.modal.show(BadgeModal, {\n              badge: this.attrs.badge.badge(),\n              userBadgeData: this.attrs.badge,\n            });\n          } else {\n            this.hide();\n          }\n\n          m.redraw();\n        },\n        (response) => {\n          this.loading = false;\n          this.handleErrors(response);\n        }\n      );\n  }\n}\n","import Modal from 'flarum/components/Modal';\nimport Button from 'flarum/components/Button';\nimport fullTime from 'flarum/helpers/fullTime';\nimport ItemList from 'flarum/utils/ItemList';\nimport LinkButton from 'flarum/components/LinkButton';\nimport GiveBadgeModal from './GiveBadgeModal';\n\nexport default class BadgeModal extends Modal {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.loading = false;\n  }\n\n  className() {\n    return 'Modal--small';\n  }\n\n  title() {\n    return app.translator.trans('gtdxyz-flarum-badges.forum.badge_information');\n  }\n\n  content() {\n    return (\n      <div>\n        <div className=\"Modal-body\">{this.data().toArray()}</div>\n        <div className=\"Modal-footer\">\n          <LinkButton\n            href={app.route('badges.item', {\n              id: this.attrs.badge.id(),\n            })}\n            className={'Button'}\n            style={{\n              margin: '0 10px',\n            }}\n          >\n            {app.translator.trans('gtdxyz-flarum-badges.forum.badge.badge_details')}\n          </LinkButton>\n\n          {this.attrs.userBadgeData && app.forum.attribute('canGiveBadge') && (\n            <Button\n              className={'Button Button--primary'}\n              onclick={() => {\n                if (confirm(app.translator.trans('gtdxyz-flarum-badges.forum.moderation.remove_badge_confirm'))) {\n                  this.loading = true;\n                  this.attrs.userBadgeData.delete().then(() => this.hide());\n                }\n              }}\n              loading={this.loading}\n            >\n              {app.translator.trans('gtdxyz-flarum-badges.forum.moderation.remove_badge')}\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  data() {\n    const items = new ItemList();\n\n    // Badge name\n    items.add(\n      'name',\n      <div className={'BadgeModalListItem'}>\n        {/* <p>\n          <b>{app.translator.trans('gtdxyz-flarum-badges.forum.badge.name')}:</b>\n        </p> */}\n        <p>{this.attrs.badge.name()}</p>\n      </div>\n    );\n\n    // Badge description\n    // items.add(\n    //   'description',\n    //   <div className={'BadgeModalListItem'}>\n    //     <p>\n    //       <b>{app.translator.trans('gtdxyz-flarum-badges.forum.badge.description')}:</b>\n    //     </p>\n    //     <p>{this.attrs.badge.description()}</p>\n    //   </div>\n    // );\n\n    // Badge earning reason\n    const earning_reason = false;\n    if(earning_reason && this.attrs.userBadgeData && (this.attrs.userBadgeData.description() || app.forum.attribute('canGiveBadge'))) {\n      items.add(\n        'earning_reason',\n        <div className={'BadgeModalListItem'}>\n          <p>\n            <b>{app.translator.trans('gtdxyz-flarum-badges.forum.badge.earning_reason')}:</b>\n          </p>\n\n          <p>\n            {this.attrs.userBadgeData.description() ? (\n              this.attrs.userBadgeData.description()\n            ) : (\n              <i>{app.translator.trans('gtdxyz-flarum-badges.forum.badge.no_earning_reason')}</i>\n            )}\n          </p>\n          <p>\n            {app.forum.attribute('canGiveBadge') && (\n              <a\n                href={'#'}\n                onclick={(e) => {\n                  e.preventDefault();\n                  app.modal.show(GiveBadgeModal, {\n                    badge: this.attrs.userBadgeData,\n                  });\n                }}\n              >\n                {app.translator.trans('gtdxyz-flarum-badges.forum.badge.update_earning_reason')}\n              </a>\n            )}\n          </p>\n        </div>\n      );\n    }\n\n    \n\n    // Badge category\n    if (this.attrs.userBadgeData) {\n      items.add(\n        'category',\n        <div className={'BadgeModalListItem'}>\n          {/* <p>\n            <b>{app.translator.trans('gtdxyz-flarum-badges.forum.badge.category')}:</b>\n          </p> */}\n          <p>\n            {this.attrs.badge.category() && this.attrs.badge.category().name()}\n\n            {/* Uncategorized */}\n            {!this.attrs.badge.category() && app.translator.trans('gtdxyz-flarum-badges.forum.uncategorized')}\n            {/* <Link\n              href={app.route(\"badges.category\", {\n                category: this.attrs.badge.category().id(),\n              })}\n            >\n              {app.translator.trans(\n                \"gtdxyz-flarum-badges.forum.all_badges\"\n              )}\n            </Link> */}\n          </p>\n        </div>\n      );\n    }\n\n    // Badge category\n    // if (this.attrs.badge && this.attrs.badge.earnedAmount()) {\n    //   items.add(\n    //     'earned_amount',\n    //     <div className={'BadgeModalListItem'}>\n    //       <p>\n    //         {app.translator.trans('gtdxyz-flarum-badges.forum.badge.earned_count', {\n    //           count: this.attrs.badge.earnedAmount(),\n    //         })}\n    //       </p>\n    //     </div>\n    //   );\n    // }\n\n    // Badge earned on\n    if (this.attrs.userBadgeData) {\n      items.add(\n        'earned_date',\n        <div className={'BadgeModalListItem'}>\n          {/* <p>\n            <b>{app.translator.trans('gtdxyz-flarum-badges.forum.badge.earned_on')}:</b>\n          </p> */}\n          <p>{fullTime(this.attrs.userBadgeData.assignedAt())}</p>\n        </div>\n      );\n    }\n\n    return items;\n  }\n}\n","import Model from 'flarum/Model';\nimport mixin from 'flarum/utils/mixin';\nimport BadgeModal from '../../forum/components/BadgeModal';\n\nexport default class Badge extends mixin(Model, {\n  name: Model.attribute('name'),\n  icon: Model.attribute('icon'),\n  order: Model.attribute('order'),\n  image: Model.attribute('image'),\n  description: Model.attribute('description'),\n  isVisible: Model.attribute('isVisible'),\n  createdAt: Model.attribute('createdAt'),\n  earnedAmount: Model.attribute('earnedAmount'),\n  category: Model.hasOne('category'),\n  backgroundColor: Model.attribute('backgroundColor'),\n  iconColor: Model.attribute('iconColor'),\n  labelColor: Model.attribute('labelColor'),\n}) {\n  apiEndpoint() {\n    return '/badges' + (this.exists ? '/' + this.data.id : '');\n  }\n}\n","import Model from 'flarum/Model';\nimport mixin from 'flarum/utils/mixin';\n\nexport default class BadgeCategory extends mixin(Model, {\n  name: Model.attribute('name'),\n  order: Model.attribute('order'),\n  description: Model.attribute('description'),\n  isEnabled: Model.attribute('isEnabled'),\n  createdAt: Model.attribute('createdAt'),\n  isTable: Model.attribute('isTable'),\n  users: Model.hasMany('users'),\n  badges: Model.hasMany('badges'),\n}) {\n  apiEndpoint() {\n    return '/badge_categories' + (this.exists ? '/' + this.data.id : '');\n  }\n}\n","import Model from 'flarum/Model';\nimport mixin from 'flarum/utils/mixin';\n\nexport default class UserBadge extends mixin(Model, {\n  user: Model.hasOne('user'),\n  badge: Model.hasOne('badge'),\n  description: Model.attribute('description'),\n  isPrimary: Model.attribute('isPrimary'),\n  assignedAt: Model.attribute('assignedAt'),\n  inUserCard: Model.attribute('inUserCard'),\n}) {\n  apiEndpoint() {\n    return '/user_badges' + (this.exists ? '/' + this.data.id : '');\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/LoadingIndicator'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Tooltip'];","import Component from 'flarum/common/Component';\nimport Tooltip from 'flarum/common/components/Tooltip';\nimport BadgeModal from '../../forum/components/BadgeModal';\n\nexport default class UserBadge extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.tooltip = this.attrs.tooltip !== false;\n    this.forceVisibility = this.attrs.forceVisibility === true;\n  }\n\n  view() {\n    // Hide badge when not enabled\n    if (!this.attrs.badge.isVisible() && !this.forceVisibility) {\n      return null;\n    }\n\n    // Just show badge\n    if (this.tooltip === false) return this.badge();\n\n    return <Tooltip text={`${this.attrs.badge.description() ? this.attrs.badge.description() : ''}`}>{this.badge()}</Tooltip>;\n  }\n\n  badge() {\n    const isPartlyHidden = !this.attrs.badge.isVisible() && this.forceVisibility;\n\n    // This badge is an image\n    if (this.attrs.badge.image()) {\n      return (\n        <img\n          src={this.attrs.badge.image()}\n          className={'UserBadgeImage'}\n          onclick={() => {\n            if (this.attrs.onclick) {\n              this.attrs.onclick();\n            }\n          }}\n          style={{\n            opacity: isPartlyHidden ? 0.5 : undefined,\n          }}\n        />\n      );\n    }\n\n    return (\n      <span\n        className={`UserBadge UserBadge-${this.attrs.badge.id()}`}\n        onclick={() => {\n          if (this.attrs.onclick) {\n            this.attrs.onclick();\n          }\n        }}\n        style={{\n          backgroundColor: this.attrs.badge.backgroundColor(),\n          color: this.attrs.badge.labelColor(),\n          borderColor: this.attrs.badge.backgroundColor(),\n          opacity: isPartlyHidden ? 0.5 : undefined,\n        }}\n      >\n        <i className={this.attrs.badge.icon()} style={{ color: this.attrs.badge.iconColor() }} /> {this.attrs.badge.name()}\n      </span>\n    );\n  }\n}\n","export default function categorizeUserBadges(user) {\n  const categories = {};\n  const uncategorized = [];\n\n  user.userBadges().map((userBadge) => {\n    if (!userBadge) return null;\n\n    // Categorized\n    if (userBadge.badge().category()) {\n      const category = userBadge.badge().category();\n\n      if (!categories[category.id()]) {\n        categories[category.id()] = {\n          name: category.name(),\n          category,\n          badges: [userBadge],\n        };\n      } else {\n        categories[category.id()].badges.push(userBadge);\n      }\n    }\n    // Uncategorized\n    else {\n      uncategorized.push(userBadge);\n    }\n  });\n\n  // Sort categories and map them into an array\n  let sortedCategories = Object.keys(categories)\n    .sort((a, b) => categories[a].category.order() - categories[b].category.order())\n    .map((category) => categories[category]);\n\n  // Add uncategorized category to list\n  if (uncategorized.length >= 1) {\n    sortedCategories.push({\n      name: app.translator.trans('gtdxyz-flarum-badges.forum.uncategorized'),\n      category: null,\n      badges: uncategorized,\n    });\n  }\n\n  return sortedCategories;\n}\n","import Component from 'flarum/common/Component';\nimport UserBadge from '../../common/components/UserBadge';\nimport categorizeUserBadges from '../utils/categorizeUserBadges';\nimport BadgeModal from './BadgeModal';\n\nexport default class UserBadgeList extends Component {\n  view() {\n    const categories = categorizeUserBadges(this.attrs.user);\n\n    return (\n      <div className=\"UserBadges\">\n        {categories.length === 0 && (\n          <div className={'Placeholder'}>\n            <p>{app.translator.trans('v17development-flarum-badges.forum.user_no_badges')}</p>\n          </div>\n        )}\n\n        {categories.length >= 1 &&\n          categories.map(({ name, category, badges }) => {\n            if (category && !category.isEnabled()) return null;\n\n            return (\n              <div className={'UserBadgesCategory'}>\n                <h3>{name}</h3>\n\n                {category && category.description() && <p>{category.description()}</p>}\n\n                {badges\n                  .sort((a, b) => a.badge().order() - b.badge().order())\n                  .map((userBadge) => (\n                    <UserBadge\n                      badge={userBadge.badge()}\n                      onclick={() =>\n                        app.modal.show(BadgeModal, {\n                          badge: userBadge.badge(),\n                          userBadgeData: userBadge,\n                        })\n                      }\n                    />\n                  ))}\n              </div>\n            );\n          })}\n      </div>\n    );\n  }\n}\n","import UserPage from 'flarum/components/UserPage';\nimport LoadingIndicator from 'flarum/components/LoadingIndicator';\nimport UserBadgeList from './UserBadgeList';\n\nexport default class BadgesProfilePage extends UserPage {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.user = null;\n\n    this.loading = true;\n\n    this.loadUser(m.route.param('username'));\n  }\n\n  content() {\n    if (!this.user || this.loading) {\n      return <LoadingIndicator size={46} />;\n    }\n    \n    if(app.session.user){\n      return UserBadgeList.component({\n        user: this.user,\n      });\n    } else {\n      return (\n        <div className={'Placeholder'}>\n          <p>{app.translator.trans('gtdxyz-flarum-badges.forum.hidden_badges')}</p>\n        </div>\n      );\n    }\n    \n  }\n\n  show(user) {\n    super.show(user);\n    this.user = user;\n\n    app.store\n      .find('users', user.id(), {\n        include: 'userBadges,userBadges.badge,userBadges.badge.category',\n      })\n      .then(() => {\n        this.loading = false;\n        m.redraw();\n      });\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Page'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/IndexPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/listItems'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Link'];","import Component from 'flarum/common/Component';\nimport Link from 'flarum/components/Link';\nimport UserBadge from '../../../common/components/UserBadge';\n\nexport default class TableView extends Component {\n  view() {\n    if (!this.attrs.badges) {\n      return null;\n    }\n\n    const badges = this.attrs.badges;\n\n    return (\n      <table width={'100%'} className={'BadgeTable'}>\n        <thead>\n          <tr>\n            <th scope=\"col\">{app.translator.trans('gtdxyz-flarum-badges.forum.badge.badges')}</th>\n            <th scope=\"col\">{app.translator.trans('gtdxyz-flarum-badges.forum.badge.description')}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {badges.map((badge) => {\n            return (\n              <tr>\n                <td>\n                  <Link href={app.route('badges.item', { id: badge.id() })}>\n                    <UserBadge badge={badge} tooltip={false} />\n                  </Link>\n                </td>\n                <td>\n                  {badge.description()}\n\n                  <div className={'BadgeTableRewarded'}>\n                    {app.translator.trans('gtdxyz-flarum-badges.forum.badge.earned_count', {\n                      count: badge.earnedAmount(),\n                    })}\n                  </div>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import Component from 'flarum/common/Component';\nimport Link from 'flarum/components/Link';\nimport UserBadge from '../../../common/components/UserBadge';\n\nexport default class BlockListView extends Component {\n  view() {\n    if (!this.attrs.badges) {\n      return null;\n    }\n\n    const badges = this.attrs.badges;\n\n    return (\n      <ul className={'BadgeCategoryList'}>\n        {badges.map((badge) => {\n          return (\n            <li>\n              <Link href={app.route('badges.item', { id: badge.id() })} className={'BadgeContainer'}>\n                <div className={'BadgeContainerInfo'}>\n                  <UserBadge badge={badge} tooltip={false} />\n\n                  {/* <p className={'BadgeDescription'}>{badge.description()}</p> */}\n\n                  {app.forum.attribute('canViewDetailedBadgeUsers') && (\n                    <p>\n                      {app.translator.trans('gtdxyz-flarum-badges.forum.badge.earned_count', {\n                        count: badge.earnedAmount(),\n                      })}\n                    </p>\n                  )}\n                </div>\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n","import Page from 'flarum/components/Page';\nimport IndexPage from 'flarum/components/IndexPage';\nimport listItems from 'flarum/common/helpers/listItems';\nimport LoadingIndicator from 'flarum/components/LoadingIndicator';\nimport TableView from './BadgeCategoryList/TableView';\nimport BlockListView from './BadgeCategoryList/BlockListView';\n\nexport default class BadgesOverviewPage extends Page {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.bodyClass = 'App--index';\n\n    this.loading = true;\n\n    app.history.push('badgeOverviewPage');\n\n    app.setTitle(app.translator.trans('gtdxyz-flarum-badges.forum.badge.badges'));\n\n    // Load badge categories\n    app.store.find('badge_categories').then(() => {\n      this.loading = false;\n\n      m.redraw();\n    });\n  }\n\n  view() {\n    const categories = app.store.all('badgeCategories').sort((a, b) => a.order() - b.order());\n\n    return (\n      <div className=\"IndexPage\">\n        {IndexPage.prototype.hero()}\n\n        <div className=\"container\">\n          <div className=\"sideNavContainer\">\n            <nav className=\"IndexPage-nav sideNav\">\n              <ul>{listItems(IndexPage.prototype.sidebarItems().toArray())}</ul>\n            </nav>\n            <div className=\"IndexPage-results sideNavOffset\">\n              <h2 className={'BadgeOverviewTitle'}>{app.translator.trans('gtdxyz-flarum-badges.forum.badge.badges')}</h2>\n\n              {this.loading && <LoadingIndicator size={'large'} />}\n\n              {!this.loading &&\n                categories.map((category) => {\n                  const badges = category.badges().sort((a, b) => a.order() - b.order());\n\n                  return (\n                    <div className={'BadgeCategory'}>\n                      <h3>{category.name()}</h3>\n                      {category.description() && <p>{category.description()}</p>}\n\n                      {category.isTable() && <TableView badges={badges} />}\n\n                      {!category.isTable() && <BlockListView badges={badges} />}\n                    </div>\n                  );\n                })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['helpers/avatar'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['helpers/humanTime'];","import Component from 'flarum/common/Component';\nimport Button from 'flarum/components/Button';\nimport Link from 'flarum/components/Link';\nimport LoadingIndicator from 'flarum/components/LoadingIndicator';\nimport avatar from 'flarum/helpers/avatar';\nimport humanTime from 'flarum/helpers/humanTime';\n\nexport default class BadgeUserList extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    // Load articles\n    this.attrs.state.refreshParams({\n      filter: {\n        badge: this.attrs.badgeId,\n      },\n      sort: '-assignedAt',\n    });\n  }\n\n  view() {\n    const state = this.attrs.state;\n\n    let loading = null;\n\n    if (state.isInitialLoading() || state.isLoadingNext()) {\n      loading = LoadingIndicator.component({\n        size: 'large',\n      });\n    } else if (state.hasNext()) {\n      loading = Button.component(\n        {\n          className: 'Button',\n          icon: 'fas fa-chevron-down',\n          onclick: state.loadNext.bind(state),\n        },\n        app.translator.trans('core.forum.discussion_list.load_more_button')\n      );\n    }\n\n    // No items\n    if (state.isInitialLoading() && state.isEmpty()) {\n      return <LoadingIndicator />;\n    }\n\n    // No items\n    if (state.isEmpty()) {\n      return <div className={'BadgeUserList-empty'}>{app.translator.trans('gtdxyz-flarum-badges.forum.no_received')}</div>;\n    }\n\n    return (\n      <div>\n        <ul className={'BadgeUserList'}>\n          {state.getPages().map((pg) => {\n            return pg.items.map((userBadge) => {\n              return (\n                <li>\n                  <Link\n                    href={app.route('user.badges', {\n                      username: userBadge.user().username(),\n                    })}\n                    className={'BadgeUserList-user'}\n                  >\n                    {avatar(userBadge.user())}\n\n                    <div className={'BadgeUserList-userinfo'}>\n                      <h4>{userBadge.user().displayName()}</h4>\n\n                      <p>\n                        {app.translator.trans('gtdxyz-flarum-badges.forum.badge.received_on', {\n                          date: humanTime(userBadge.assignedAt()),\n                        })}\n                      </p>\n                    </div>\n                  </Link>\n                </li>\n              );\n            });\n          })}\n        </ul>\n\n        {loading && <div className=\"SupportSearchList-loadMore\">{loading}</div>}\n      </div>\n    );\n  }\n}\n","import Page from 'flarum/components/Page';\nimport IndexPage from 'flarum/components/IndexPage';\nimport listItems from 'flarum/common/helpers/listItems';\nimport LoadingIndicator from 'flarum/components/LoadingIndicator';\nimport LinkButton from 'flarum/components/LinkButton';\nimport BadgeUserList from './BadgeUserList';\n\nimport UserBadge from '../../common/components/UserBadge';\n\nexport default class BadgeItemPage extends Page {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.bodyClass = 'App--index';\n\n    const found = app.store.getById('badges', m.route.param('id'));\n\n    this.loading = !found;\n\n    if (!found) {\n      // Load badge categories\n      app.store.find(`badges/${m.route.param('id')}`).then((badge) => {\n        this.loading = false;\n\n        app.history.push('badgeItemPage', badge.name());\n\n        this.setTitle(badge);\n\n        m.redraw();\n      });\n    } else {\n      app.history.push('badgeItemPage', found.name());\n\n      this.setTitle(found);\n    }\n  }\n\n  setTitle(badge) {\n    app.setTitle(`${badge.name()} - ${app.translator.trans('gtdxyz-flarum-badges.forum.badge.badges')}`);\n  }\n\n  view() {\n    const badge = app.store.getById('badges', m.route.param('id'));\n\n    return (\n      <div className=\"IndexPage\">\n        {IndexPage.prototype.hero()}\n\n        <div className=\"container\">\n          <div className=\"sideNavContainer\">\n            <nav className=\"IndexPage-nav sideNav\">\n              <ul>{listItems(IndexPage.prototype.sidebarItems().toArray())}</ul>\n            </nav>\n            <div className=\"IndexPage-results sideNavOffset\">\n              <LinkButton href={app.route('badges')} icon={'fas fa-chevron-left'} className={'Button BadgesOverviewButton'}>\n                {app.translator.trans('gtdxyz-flarum-badges.forum.badge.badges')}\n              </LinkButton>\n\n              {this.loading && <LoadingIndicator size={'large'} />}\n\n              {!this.loading && (\n                <div className={'BadgeUserListInfo'}>\n                  <UserBadge badge={badge} tooltip={false} />\n\n                  <div className={'BadgeUserListInfo-meta'}>\n                    <h3>{badge.name()}</h3>\n                    <p>{badge.description()}</p>\n                  </div>\n                </div>\n              )}\n\n\n              {app.session?.user?.isAdmin() && badge && app.forum.attribute('canViewDetailedBadgeUsers') && (\n                <h3>\n                  {app.translator.trans('gtdxyz-flarum-badges.forum.badge.earned_by_count', {\n                    count: badge.earnedAmount(),\n                  })}\n                </h3>\n              )}\n\n              {app.session?.user?.isAdmin() && !this.loading && app.forum.attribute('canViewDetailedBadgeUsers') && (\n                <BadgeUserList state={app.userBadgeListState} badgeId={badge.id()} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { extend } from 'flarum/extend';\nimport IndexPage from 'flarum/components/IndexPage';\nimport LinkButton from 'flarum/components/LinkButton';\n\nexport default function addSidebarNav() {\n  extend(IndexPage.prototype, 'navItems', function (items) {\n    items.add(\n      'badges',\n      <LinkButton icon=\"fas fa-id-badge\" href={app.route('badges')}>\n        {app.translator.trans('gtdxyz-flarum-badges.forum.badge.badges')}\n      </LinkButton>,\n      15\n    );\n\n    return items;\n  });\n}\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/states/PaginatedListState'];","import PaginatedListState from 'flarum/common/states/PaginatedListState';\n\nexport default class UserBadgeListState extends PaginatedListState {\n  constructor(params, page = 1) {\n    super(params, page, 18);\n  }\n\n  get type() {\n    return 'user_badges';\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/Notification'];","import Notification from 'flarum/forum/components/Notification';\n\nexport default class BadgeReceivedNotification extends Notification {\n  icon() {\n    return '';\n  }\n\n  href() {\n    return app.route('user.badges', {\n      username: app.session.user.username(),\n    });\n  }\n\n  content() {\n    return app.translator.trans('gtdxyz-flarum-badges.forum.notification.title');\n  }\n\n  excerpt() {\n    const subject = this.attrs.notification.subject();\n\n    return (\n      <div>\n        <i className={`icon ${subject.badge().icon()}`} />\n\n        {subject.badge().name()}\n      </div>\n    );\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/NotificationGrid'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/UserCard'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Switch'];","import Modal from 'flarum/components/Modal';\nimport Button from 'flarum/components/Button';\nimport ItemList from 'flarum/utils/ItemList';\nimport Switch from 'flarum/components/Switch';\nimport UserBadge from '../../common/components/UserBadge';\nimport categorizeUserBadges from '../utils/categorizeUserBadges';\nimport Tooltip from 'flarum/common/components/Tooltip';\n\nexport default class SelectUserCardBadgesModal extends Modal {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.loading = false;\n\n    this.limit = app.forum.attribute('numberOfBadgesOnUserCard');\n    this.selectedBadges = this.attrs.user\n      .userBadges()\n      .filter((userBadge) => userBadge.inUserCard())\n      .map((userBadge) => userBadge.id());\n  }\n\n  className() {\n    return 'Modal--big UserCardBadgesModal';\n  }\n\n  title() {\n    return app.translator.trans('gtdxyz-flarum-badges.forum.badges_in_card.title');\n  }\n\n  content() {\n    return (\n      <div>\n        <div className=\"Modal-body\">{this.data().toArray()}</div>\n        <div className=\"Modal-footer\">\n          <Button className={'Button Button--primary'} onclick={() => this.save()} loading={this.loading}>\n            {app.translator.trans('gtdxyz-flarum-badges.forum.save_changes')}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  data() {\n    const items = new ItemList();\n\n    const categories = categorizeUserBadges(this.attrs.user);\n\n    // Badge name\n    items.add(\n      'info',\n      <div className={'BadgeModalListItem'}>\n        <p>{app.translator.trans('gtdxyz-flarum-badges.forum.badges_in_card.description')}</p>\n        <p>\n          {app.translator.trans('gtdxyz-flarum-badges.forum.badges_in_card.select_limit', {\n            limit: app.forum.attribute('numberOfBadgesOnUserCard'),\n          })}\n        </p>\n      </div>\n    );\n\n    // Loop through all badge categories\n    categories.map(({ name, category, badges }) => {\n      items.add(\n        `badge_category_${category ? category.id() : 'uncategorized'}`,\n        <div className={'UserCardBadgesModalCategory'}>\n          <div className={'UserCardBadgesModalCategory-name'}>{name}</div>\n\n          {/* Loop through the badges */}\n          {badges\n            .sort((a, b) => a.badge().order() - b.badge().order())\n            .map((userBadge) => {\n              const disabled = this.selectedBadges.length >= this.limit && this.selectedBadges.indexOf(userBadge.id()) === -1;\n\n              return (\n                <Tooltip\n                  text={\n                    disabled\n                      ? app.translator.trans('gtdxyz-flarum-badges.forum.badges_in_card.hit_limit', {\n                          limit: app.forum.attribute('numberOfBadgesOnUserCard'),\n                        })\n                      : ''\n                  }\n                  position=\"bottom\"\n                >\n                  <div\n                    className={'UserCardBadgesModalCategory-badge'}\n                    onclick={() => {\n                      if (disabled) {\n                        return;\n                      }\n\n                      const currentIndex = this.selectedBadges.indexOf(userBadge.id());\n\n                      // Remove from selected list\n                      if (currentIndex >= 0) {\n                        this.selectedBadges.splice(currentIndex, 1);\n                      } else {\n                        // Add to list\n                        this.selectedBadges.push(userBadge.id());\n                      }\n                    }}\n                  >\n                    <div className={'UserCardBadgesModalCategory-badge-preview'}>\n                      <UserBadge badge={userBadge.badge()} onclick={() => {}} />\n                      <div className=\"preview-name\">{userBadge.badge().attribute('name')}</div>\n                    </div>\n                    {/* <div className={\"UserCardBadgesModalCategory-badge-points\"}></div> */}\n                    <div className={'UserCardBadgesModalCategory-badge-switch'}>\n                      {Switch.component({\n                        state: this.selectedBadges.indexOf(userBadge.id()) >= 0,\n                        disabled,\n                      })}\n                    </div>\n                  </div>\n                </Tooltip>\n              );\n            })}\n        </div>\n      );\n    });\n\n    return items;\n  }\n\n  save() {\n    this.loading = true;\n\n    this.attrs.user\n      .save({ userCardBadges: this.selectedBadges })\n      .then(() => {\n        // Update current user badges store\n        this.attrs.user.userBadges().map((userBadge) => {\n          userBadge.pushAttributes({\n            inUserCard: this.selectedBadges.indexOf(userBadge.id()) >= 0,\n          });\n        });\n\n        this.hide();\n      })\n      .catch(() => {})\n      .then(() => {\n        this.loading = false;\n        m.redraw();\n      });\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/DiscussionListState'];","import { extend } from 'flarum/extend';\nimport Model from 'flarum/Model';\nimport User from 'flarum/models/User';\nimport UserPage from 'flarum/components/UserPage';\nimport UserControls from 'flarum/utils/UserControls';\nimport LinkButton from 'flarum/components/LinkButton';\nimport Button from 'flarum/components/Button';\nimport Badge from '../common/models/Badge';\nimport BadgeCategory from '../common/models/BadgeCategory';\nimport UserBadge from '../common/models/UserBadge';\nimport BadgesProfilePage from './components/BadgesProfilePage';\nimport BadgesOverviewPage from './components/BadgesOverviewPage';\nimport BadgeItemPage from './components/BadgeItemPage';\nimport GiveBadgeModal from './components/GiveBadgeModal';\nimport addSidebarNav from './addSidebarNav';\nimport UserBadgeListState from './states/UserBadgeListState';\nimport BadgeReceivedNotification from './notification/BadgeReceivedNotification';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\nimport addBadgeListUserCard from './addBadgeListUserCard';\nimport DiscussionListState from 'flarum/forum/states/DiscussionListState';\n\napp.initializers.add('gtdxyz-flarum-badges', (app) => {\n  app.store.models.badges = Badge;\n  app.store.models.badgeCategories = BadgeCategory;\n  app.store.models.userBadges = UserBadge;\n\n  User.prototype.userBadges = Model.hasMany('userBadges');\n  User.prototype.userPrimaryBadge = Model.hasOne('userPrimaryBadge');\n\n  // Add user badges to the user profile\n  app.routes['user.badges'] = {\n    path: '/u/:username/badges',\n    component: BadgesProfilePage,\n  };\n\n  // Badges overview page\n  app.routes.badges = {\n    path: '/badges',\n    component: BadgesOverviewPage,\n  };\n\n  // Future\n  // // Badges overview page\n  // app.routes[\"badges.category\"] = {\n  //   path: \"/badges/category/:id\",\n  //   component: BadgesOverviewPage,\n  // };\n\n  // Badge item page\n  app.routes['badges.item'] = {\n    path: '/badges/:id',\n    component: BadgeItemPage,\n  };\n\n  addSidebarNav();\n\n  app.userBadgeListState = new UserBadgeListState({});\n\n  // Badge received notification\n  app.notificationComponents.badgeReceived = BadgeReceivedNotification;\n\n  // Enable badge notifications?\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('badgeReceived', {\n      name: 'badgeReceived',\n      icon: 'fas fa-user-tag',\n      label: app.translator.trans('gtdxyz-flarum-badges.forum.notification.settings'),\n    });\n  });\n\n  // Add uploads to user page menu items\n  extend(UserPage.prototype, 'navItems', function (items) {\n    if (!app.session.user) {\n      return;\n    }\n    items.add(\n      'badges',\n      LinkButton.component(\n        {\n          href: app.route('user.badges', {\n            username: this.user.username(),\n          }),\n          name: 'badges',\n          icon: 'fas fa-user-tag',\n        },\n        [\n          app.translator.trans('gtdxyz-flarum-badges.forum.badge.badges')\n        ]\n      ),\n      15\n    );\n  });\n\n  extend(UserControls, 'moderationControls', function (items, user) {\n    // User can give badges\n    if (app.forum.attribute('canGiveBadge')) {\n      items.add(\n        'test',\n        <Button\n          icon=\"fas fa-user-tag\"\n          onclick={() =>\n            app.modal.show(GiveBadgeModal, {\n              user: user,\n            })\n          }\n        >\n          {app.translator.trans('gtdxyz-flarum-badges.forum.give_badge')}\n        </Button>\n      );\n    }\n  });\n\n  addBadgeListUserCard();\n\n  extend(DiscussionListState.prototype, 'requestParams', function (params) {\n    if (typeof params.include === 'string') {\n      params.include = [params.include];\n    } else {\n      params.include?.push('user.userBadges', 'user.userBadges.badge');\n    }\n  });\n});\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport UserCard from 'flarum/forum/components/UserCard';\nimport Link from 'flarum/common/components/Link';\nimport UserBadge from '../common/components/UserBadge';\nimport BadgeModal from './components/BadgeModal';\nimport SelectUserCardBadgesModal from './components/SelectUserCardBadgesModal';\nimport Tooltip from 'flarum/common/components/Tooltip';\n\nexport default function addBadgeListUserCard() {\n  extend(UserCard.prototype, 'infoItems', function (items) {\n    // Get user\n    const user = this.attrs.user;\n\n    // Don't show badges\n    if (!app.forum.attribute('showBadgesOnUserCard') || !user.userBadges) return;\n\n    const userBadges = user.userBadges() ?? [];\n\n    // No badges to show\n    if (userBadges.length < 1 || !userBadges) return;\n\n    const limit = app.forum.attribute('numberOfBadgesOnUserCard');\n\n    // Check for all badges\n    let visibleBadges = userBadges.filter((userBadge) => {\n      return userBadge.inUserCard();\n    });\n\n    // No badges selected (yet). Just select a few\n    if (visibleBadges.length === 0) {\n      // visibleBadges = userBadges.slice(0, limit);\n    }\n\n    const badges = visibleBadges.map((userBadge) => {\n      return (\n        <UserBadge\n          badge={userBadge.badge()}\n          onclick={() =>\n            app.modal.show(BadgeModal, {\n              badge: userBadge.badge(),\n              userBadgeData: userBadge,\n            })\n          }\n        />\n      );\n    });\n\n    // if (badges.length < userBadges.length) {\n    //   const count = userBadges.length - visibleBadges.length;\n    //   badges.push(\n    //     <Link\n    //       href={app.route('user.badges', {\n    //         username: user.username(),\n    //       })}\n    //       className=\"UserBadge more-badges\"\n    //     >\n    //       {app.translator.trans('gtdxyz-flarum-badges.forum.badge.others_link', { count })}\n    //     </Link>\n    //   );\n    // }\n\n    // Manage badges\n    if ((user === app.session.user && app.forum.attribute('editOwnUserCardBadges')) || app.forum.attribute('editUserCardBadges')) {\n      badges.push(\n        <Tooltip text={app.translator.trans('gtdxyz-flarum-badges.forum.badges_in_card.manage_badges')}>\n          <a\n            href={'#'}\n            className=\"UserBadge more-badges\"\n            onclick={(e) => {\n              e.preventDefault();\n              app.modal.show(SelectUserCardBadgesModal, { user });\n            }}\n          >\n            <i className={'fas fa-pencil-alt BadgeIconOnly'} />\n          </a>\n        </Tooltip>\n      );\n    }\n\n    items.add('badges', badges);\n  });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","app","_setPrototypeOf","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","create","constructor","GiveBadgeModal","oninit","vnode","this","selectedBadge","attrs","badge","user","userHasBadge","store","createRecord","description","Stream","categories","uncategorizedBadges","loading","find","include","then","badges","forEach","category","id","push","m","redraw","className","title","translator","trans","exists","content","fields","toArray","type","disabled","items","ItemList","add","onchange","e","target","getById","checkUserHasBadge","values","map","label","name","length","class","placeholder","bidi","foundBadge","userBadges","userBadge","onsubmit","preventDefault","save","relationships","modal","show","BadgeModal","userBadgeData","hide","response","handleErrors","Modal","data","href","route","style","margin","forum","attribute","onclick","confirm","fullTime","assignedAt","Badge","apiEndpoint","mixin","Model","icon","order","image","isVisible","createdAt","earnedAmount","backgroundColor","iconColor","labelColor","BadgeCategory","isEnabled","isTable","users","UserBadge","isPrimary","inUserCard","tooltip","forceVisibility","view","text","isPartlyHidden","src","opacity","undefined","color","borderColor","Component","categorizeUserBadges","uncategorized","sortedCategories","keys","sort","b","UserBadgeList","BadgesProfilePage","loadUser","param","size","session","component","UserPage","TableView","width","scope","count","BlockListView","BadgesOverviewPage","bodyClass","history","setTitle","all","IndexPage","listItems","Page","BadgeUserList","state","refreshParams","filter","badgeId","isInitialLoading","isLoadingNext","LoadingIndicator","hasNext","Button","loadNext","bind","isEmpty","getPages","pg","username","avatar","displayName","date","humanTime","BadgeItemPage","found","isAdmin","userBadgeListState","addSidebarNav","extend","_defineProperties","props","i","descriptor","configurable","writable","UserBadgeListState","params","page","Constructor","protoProps","PaginatedListState","BadgeReceivedNotification","excerpt","subject","notification","Notification","SelectUserCardBadgesModal","limit","selectedBadges","indexOf","position","currentIndex","splice","Switch","userCardBadges","pushAttributes","initializers","models","badgeCategories","User","routes","path","notificationComponents","badgeReceived","NotificationGrid","LinkButton","UserControls","UserCard","visibleBadges","DiscussionListState"],"sourceRoot":""}